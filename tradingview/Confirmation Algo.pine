// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ¬© Ok-Charity

//@version=4
strategy("Confirmation Algo", overlay=true, margin_long=100, margin_short=100)

///////////////////////PARABOLIC SAR///////////////////////

start = input(0.02)
increment = input(0.02)
maximum = input(0.2, "Max Value")
out = sar(start, increment, maximum)

///////////////////////SMMA BILL WILLIAMS///////////////////////

// Alligator
smma(src, length) =>
    smma = 0.0
    smma := na(smma[1]) ? sma(src, length) : (smma[1] * (length - 1) + src) / length
lipsLength  = input(title="üê≤ Lips Length", defval=50)
teethLength = input(title="üê≤ Teeth Length", defval=100)
jawLength   = input(title="üê≤ Jaw Length", defval=200)
lipsOffset  = input(title="üê≤ Lips Offset", defval=3)
teethOffset = input(title="üê≤ Teeth Offset", defval=5)
jawOffset   = input(title="üê≤ Jaw Offset", defval=8)
lips        = smma(hl2, lipsLength)
teeth       = smma(hl2, teethLength)
jaw         = smma(hl2, jawLength)

// Fractals
n = input(title="üìå Period", defval=2, minval=2, type=input.integer)
upFractal =
 ((high[n+2] < high[n]) and (high[n+1] < high[n]) and (high[n-1] < high[n]) and (high[n-2] < high[n])) or
 ((high[n+3] < high[n]) and (high[n+2] < high[n]) and (high[n+1] == high[n]) and (high[n-1] < high[n]) and (high[n-2] < high[n])) or
 ((high[n+4] < high[n]) and (high[n+3] < high[n]) and (high[n+2] == high[n]) and (high[n+1] <= high[n]) and (high[n-1] < high[n]) and (high[n-2] < high[n])) or
 ((high[n+5] < high[n]) and (high[n+4] < high[n]) and (high[n+3] == high[n]) and (high[n+2] == high[n]) and (high[n+1] <= high[n]) and (high[n-1] < high[n]) and (high[n-2] < high[n])) or
 ((high[n+6] < high[n]) and (high[n+5] < high[n]) and (high[n+4] == high[n]) and (high[n+3] <= high[n]) and (high[n+2] == high[n]) and (high[n+1] <= high[n]) and (high[n-1] < high[n]) and (high[n-2] < high[n]))
dnFractal =
 ((low[n+2] > low[n]) and (low[n+1] > low[n]) and (low[n-1] > low[n]) and (low[n-2] > low[n])) or
 ((low[n+3] > low[n]) and (low[n+2] > low[n]) and (low[n+1] == low[n]) and (low[n-1] > low[n]) and (low[n-2] > low[n])) or
 ((low[n+4] > low[n]) and (low[n+3] > low[n]) and (low[n+2] == low[n]) and (low[n+1] >= low[n]) and (low[n-1] > low[n]) and (low[n-2] > low[n])) or
 ((low[n+5] > low[n]) and (low[n+4] > low[n]) and (low[n+3] == low[n]) and (low[n+2] == low[n]) and (low[n+1] >= low[n]) and (low[n-1] > low[n]) and (low[n-2] > low[n])) or
 ((low[n+6] > low[n]) and (low[n+5] > low[n]) and (low[n+4] == low[n]) and (low[n+3] >= low[n]) and (low[n+2] == low[n]) and (low[n+1] >= low[n]) and (low[n-1] > low[n]) and (low[n-2] > low[n]))

// Resistance, Support
showRS   = input(title="‚§í‚§ì Show Res-Sup", defval=true)
lengthRS = input(title="‚§í‚§ì Res-Sup Length", defval=13, type=input.integer)
highRS   = valuewhen(high >= highest(high, lengthRS), high, 0)
lowRS    = valuewhen(low <= lowest(low, lengthRS), low, 0)




///////////////////////ULTRAFAST PARROT///////////////////////

short = input(title="Short ALMA Length", type=input.integer, defval=5)
long = input(title="Long ALMA Length", type=input.integer, defval=21)
showhist = input(true, type=input.bool, title="Show Histogram?")
shapes = input(false, type=input.bool, title="Show signal crossings?")
showbg =input(true, type=input.bool, title="Paint BG?")

//Fast period
offset = input(0.75, step=0.05, minval=0.05, title="Fast Offset")
sigma = input(4, step=1, minval=1, title="Fast Sigma")
//Long-Trend period
offsetT = input(0.75, step=0.05, minval=0.05, title="Trend Offset")
sigmaT = input(4, step=1, minval=1, title="Trend Sigma")
//Signal
offsets = input(0.85, step=0.05, minval=0.05, title="Signal Offset")
sigmas = input(6, step=1, minval=1, title="Signal Sigma")

t = tickerid(syminfo.prefix, syminfo.ticker)
src = security(t, timeframe.period, close)
pc = change(security(t, timeframe.period, close))

double_smooth(src, long, short) =>
    first_smooth = alma(src, long, offsetT, sigmaT)
    alma(first_smooth, short, offset, sigma)
double_smoothed_pc = double_smooth(pc, long, short)
double_smoothed_abs_pc = double_smooth(abs(pc), long, short)

tsi_line = 100 * (double_smoothed_pc / double_smoothed_abs_pc)
tsi = tsi_line

ma0 = alma(tsi,3, offsets, sigmas)
ma1 = alma(tsi,5, offsets, sigmas)
ma2 = alma(tsi,8, offsets, sigmas)
ma3 = alma(tsi,13, offsets, sigmas)
ma4 = alma(tsi,21, offsets, sigmas)
ma5 = alma(tsi,34, offsets, sigmas)
ma6 = alma(tsi,55, offsets, sigmas)
tsi_signal = (ma0+ma1+ma2+ma3+ma4+ma5+ma6)/7
tsi_hist = tsi_line - tsi_signal
forestgreen = #228B22
crimson = #DC143C
darkorange = #FF8C00
bbcolor = #F5FFFA

belowsignal = tsi_line <= tsi_signal
crossing_u = crossover(tsi_line, tsi_signal)
crossing_d = crossunder(tsi_line, tsi_signal)

xoup = crossover(tsi_line, 0)
xodn = crossunder(tsi_line, 0)

tsi_color = belowsignal ? crimson : forestgreen
tsi_color_hist = belowsignal and tsi_hist >= tsi_hist[1] ? color.maroon : belowsignal and tsi_hist < tsi_hist[1] ? crimson : tsi_hist < tsi_hist[1] ? forestgreen : color.lime


///////////////////////TREND METER///////////////////////

// Inputs / Menus

// Trend Bar / Meter - Inputs / Menus

ShowTrendBar = true

WTSetups = input(true, "Wave Trend Filtered by Trend", group = "Signals")

TMSetups = input(true, "All 3 Trend Meters Now Align", group = "Signals")

MSBar1 = "Trend Filter"  // input(title= "1 - Wave Trend Signals",    defval = "Trend Filter",                             options = ["N/A", "Trend Filter", "Filter X", "Filter X + Trend Filter"])

// MSBar1         = input(title= "1 - Wave Trend Signals",    defval = "Trend Filter",                             options = ["N/A", "Trend Filter", "Filter X", "Filter X + Trend Filter"])

MSBar2 = "Trend Filter"  // input(title= "2 - Wave Trend Signals",    defval = "Filter X",                                 options = ["N/A", "Trend Filter", "Filter X", "Filter X + Trend Filter"])



TrendBar1 = input(title="Trend Meter 1", defval="MACD Crossover - Fast - 8, 21, 5", options=["MACD Crossover - 12, 26, 9", "MACD Crossover - Fast - 8, 21, 5", "Mom Dad Cross (Top Dog Trading)", "RSI Signal Line Cross - RSI 13, Sig 21", "RSI 13: > or < 50", "RSI 5: > or < 50", "Trend Candles", "N/A"],   group = "Trend Meters")  // "MA Crossover", "DAD Direction (Top Dog Trading)",

TrendBar2 = input(title="Trend Meter 2", defval="RSI 13: > or < 50", options=["MACD Crossover - 12, 26, 9", "MACD Crossover - Fast - 8, 21, 5", "Mom Dad Cross (Top Dog Trading)", "RSI Signal Line Cross - RSI 13, Sig 21", "RSI 13: > or < 50", "RSI 5: > or < 50", "Trend Candles", "N/A"],                  group = "Trend Meters")  // "MA Crossover", "DAD Direction (Top Dog Trading)",

TrendBar3 = input(title="Trend Meter 3", defval="RSI 5: > or < 50", options=["MACD Crossover - 12, 26, 9", "MACD Crossover - Fast - 8, 21, 5", "Mom Dad Cross (Top Dog Trading)", "RSI Signal Line Cross - RSI 13, Sig 21", "RSI 13: > or < 50", "RSI 5: > or < 50", "Trend Candles", "N/A"],                   group = "Trend Meters")  // "MA Crossover", "DAD Direction (Top Dog Trading)",

TrendBar4 = input(title="Trend Bar 1", defval="MA Crossover", options=["MA Crossover", "MA Direction - Fast MA - TB1", "MA Direction - Slow MA - TB1", "N/A"],   group = "Trend Bars")  //  "MACD Crossover - 12, 26 9", "MACD Crossover - Fast - 8, 21, 5", "DAD Direction (Top Dog Trading)",

TrendBar5 = input(title="Trend Bar 2", defval="MA Crossover", options=["MA Crossover", "MA Direction - Fast MA - TB2", "MA Direction - Slow MA - TB2", "N/A"],   group = "Trend Bars")  //  "MACD Crossover - 12, 26 9", "MACD Crossover - Fast - 8, 21, 5", "DAD Direction (Top Dog Trading)",


////////////////Signals - Wave Trend/////////////////////////////////////////////////////////////////////////////////////////////////




// Wave Trend - RSI

RSIMC = rsi(close, 14)

// Wave Trend

ap = hlc3  // input(hlc3, "Wave Trend - Source")
n1 = 9  //input(9,    "Wave Trend - WT Channel Length")
n2 = 12  // input(12,   "Wave Trend - WT Average Length")
esa = ema(ap, n1)
de = ema(abs(ap - esa), n1)
ci = (ap - esa) / (0.015 * de)
tci = ema(ci, n2)
wt1 = tci
wt2 = sma(wt1, 3)

// Wave Trend - Overbought & Oversold lines

obLevel2 = 60  // input( 60,  "Wave Trend - WT Very Overbought")
obLevel = 50  // input( 50,  "Wave Trend - WT Overbought")
osLevel = -50  // input(-50,  "Wave Trend - WT Oversold")
osLevel2 = -60  // input(-60,  "Wave Trend - WT Very Oversold")

// Wave Trend - Conditions

WTCross = cross(wt1, wt2)
WTCrossUp = wt2 - wt1 <= 0
WTCrossDown = wt2 - wt1 >= 0
WTOverSold = wt2 <= osLevel2
WTOverBought = wt2 >= obLevel2


// MA Inputs

MA1_Length = input(5,  title='Fast MA', minval=1,                             group = "Trend Bar 1 - Settings", inline = "TB1 Fast")
MA1_Type   = input(    title='',        defval="EMA", options=["EMA", "SMA"], group = "Trend Bar 1 - Settings", inline = "TB1 Fast")

MA2_Length = input(11, title='Slow MA', minval=1,                             group = "Trend Bar 1 - Settings", inline = "TB1 Slow")
MA2_Type   = input(    title='',        defval="EMA", options=["EMA", "SMA"], group = "Trend Bar 1 - Settings", inline = "TB1 Slow")

MA3_Length = input(13, title='Fast MA', minval=1,                             group = "Trend Bar 2 - Settings", inline = "TB2 Fast")
MA3_Type   = input(    title='',        defval="EMA", options=["EMA", "SMA"], group = "Trend Bar 2 - Settings", inline = "TB2 Fast")

MA4_Length = input(36, title='Slow MA', minval=1,                             group = "Trend Bar 2 - Settings", inline = "TB2 Slow")
MA4_Type   = input(    title='',        defval="SMA", options=["EMA", "SMA"], group = "Trend Bar 2 - Settings", inline = "TB2 Slow")


// MA Calculations

Close = security(syminfo.tickerid, timeframe.period, close, barmerge.lookahead_on)


MA1 = if MA1_Type == "SMA"
    sma(Close, MA1_Length)
else
    ema(Close, MA1_Length)


MA2 = if MA2_Type == "SMA"
    sma(Close, MA2_Length)
else
    ema(Close, MA2_Length)


MA3 = if MA3_Type == "SMA"
    sma(Close, MA3_Length)
else
    ema(Close, MA3_Length)


MA4 = if MA4_Type == "SMA"
    sma(Close, MA4_Length)
else
    ema(Close, MA4_Length)


// MA Crossover Condition

MACrossover1 = MA1 > MA2 ? 1 : 0

MACrossover2 = MA3 > MA4 ? 1 : 0

// MA Direction Condition

MA1Direction = MA1 > MA1[1] ? 1 : 0

MA2Direction = MA2 > MA2[1] ? 1 : 0

MA3Direction = MA3 > MA3[1] ? 1 : 0

MA4Direction = MA4 > MA4[1] ? 1 : 0

// MA Direction Change Condition

MA1PositiveDirectionChange = MA1Direction and not MA1Direction[1] ? 1 : 0

MA2PositiveDirectionChange = MA2Direction and not MA2Direction[1] ? 1 : 0

MA3PositiveDirectionChange = MA3Direction and not MA3Direction[1] ? 1 : 0

MA4PositiveDirectionChange = MA4Direction and not MA4Direction[1] ? 1 : 0


MA1NegativeDirectionChange = not MA1Direction and MA1Direction[1] ? 1 : 0

MA2NegativeDirectionChange = not MA2Direction and MA2Direction[1] ? 1 : 0

MA3NegativeDirectionChange = not MA3Direction and MA3Direction[1] ? 1 : 0

MA4NegativeDirectionChange = not MA4Direction and MA4Direction[1] ? 1 : 0


// MACD and MOM & DAD - Top Dog Trading

// Standard MACD Calculations

MACDfastMA = 12
MACDslowMA = 26
MACDsignalSmooth = 9


MACDLine = ema(close, MACDfastMA) - ema(close, MACDslowMA)

SignalLine = ema(MACDLine, MACDsignalSmooth)

MACDHistogram = MACDLine - SignalLine


// MACD- Background Color Change Condition

MACDHistogramCross = MACDHistogram > 0 ? 1 : 0

MACDLineOverZero = MACDLine > 0 ? 1 : 0

MACDLineOverZeroandHistogramCross = MACDHistogramCross and MACDLineOverZero ? 1 : 0

MACDLineUnderZeroandHistogramCross = not MACDHistogramCross and not MACDLineOverZero ? 1 : 0


// Fast MACD Calculations

FastMACDfastMA = 8
FastMACDslowMA = 21
FastMACDsignalSmooth = 5


FastMACDLine = ema(close, FastMACDfastMA) - ema(close, FastMACDslowMA)

FastSignalLine = ema(FastMACDLine, FastMACDsignalSmooth)

FastMACDHistogram = FastMACDLine - FastSignalLine

// Fast MACD- Background Color Change Condition

FastMACDHistogramCross = FastMACDHistogram > 0 ? 1 : 0

FastMACDLineOverZero = FastMACDLine > 0 ? 1 : 0

FastMACDLineOverZeroandHistogramCross = FastMACDHistogramCross and FastMACDLineOverZero ? 1 : 0

FastMACDLineUnderZeroandHistogramCross = not FastMACDHistogramCross and not FastMACDLineOverZero ? 1 : 0


// Top Dog Trading - Mom Dad Calculations

TopDog_Fast_MA = 5
TopDog_Slow_MA = 20
TopDog_Sig = 30


TopDogMom = ema(close, TopDog_Fast_MA) - ema(close, TopDog_Slow_MA)

TopDogDad = ema(TopDogMom, TopDog_Sig)

// Top Dog Dad - Background Color Change Condition

TopDogDadDirection = TopDogDad > TopDogDad[1] ? 1 : 0

TopDogMomOverDad = TopDogMom > TopDogDad ? 1 : 0

TopDogMomOverZero = TopDogMom > 0 ? 1 : 0

TopDogDadDirectandMomOverZero = TopDogDadDirection and TopDogMomOverZero ? 1 : 0

TopDogDadDirectandMomUnderZero = not TopDogDadDirection and not TopDogMomOverZero ? 1 : 0



////// Trend Barmeter Calculations //////

// UCS_Trend / Trend Candles Trend Barmeter Calculations

//UCS_Trend by ucsgears copy Trend Candles
//Interpretation of TTM Trend bars. It is really close to the actual. 

haclose = ohlc4
haopen = 0.0
haopen := na(haopen[1]) ? (open + close) / 2 : (haopen[1] + haclose[1]) / 2
//hahigh = max(high, max(haopen, haclose))
//halow = min(low, min(haopen, haclose))

ccolor = haclose - haopen > 0 ? 1 : 0

inside6 = haopen <= max(haopen[6], haclose[6]) and haopen >= min(haopen[6], haclose[6]) and 
   haclose <= max(haopen[6], haclose[6]) and haclose >= min(haopen[6], haclose[6]) ? 
   1 : 0

inside5 = haopen <= max(haopen[5], haclose[5]) and haopen >= min(haopen[5], haclose[5]) and 
   haclose <= max(haopen[5], haclose[5]) and haclose >= min(haopen[5], haclose[5]) ? 
   1 : 0

inside4 = haopen <= max(haopen[4], haclose[4]) and haopen >= min(haopen[4], haclose[4]) and 
   haclose <= max(haopen[4], haclose[4]) and haclose >= min(haopen[4], haclose[4]) ? 
   1 : 0

inside3 = haopen <= max(haopen[3], haclose[3]) and haopen >= min(haopen[3], haclose[3]) and 
   haclose <= max(haopen[3], haclose[3]) and haclose >= min(haopen[3], haclose[3]) ? 
   1 : 0

inside2 = haopen <= max(haopen[2], haclose[2]) and haopen >= min(haopen[2], haclose[2]) and 
   haclose <= max(haopen[2], haclose[2]) and haclose >= min(haopen[2], haclose[2]) ? 
   1 : 0

inside1 = haopen <= max(haopen[1], haclose[1]) and haopen >= min(haopen[1], haclose[1]) and 
   haclose <= max(haopen[1], haclose[1]) and haclose >= min(haopen[1], haclose[1]) ? 
   1 : 0


colorvalue = inside6 ? ccolor[6] : inside5 ? ccolor[5] : inside4 ? ccolor[4] : 
   inside3 ? ccolor[3] : inside2 ? ccolor[2] : inside1 ? ccolor[1] : ccolor

TrendBarTrend_Candle_Color = colorvalue ? #288a75 : color.red

TrendBarTrend_Candle = colorvalue ? 1 : 0


// barcolor(Trend_Candle_Color , title = "Trend Candles")
// barcolor(ShowTrendCandles? Trend_Candle_Color : na, title = "Trend Candles")


// RSI 5 Trend Barmeter Calculations

RSI5 = rsi(close, 5)

RSI5Above50 = RSI5 > 50 ? 1 : 0

RSI5Color = RSI5Above50 ? #288a75 : color.red

TrendBarRSI5Color = RSI5Above50 ? #288a75 : color.red


// RSI 5 Trend Barmeter Calculations

RSI13 = rsi(close, 13)


// Linear Regression Calculation For RSI Signal Line

SignalLineLength1 = 21

x = bar_index
y = RSI13
x_ = sma(x, SignalLineLength1)
y_ = sma(y, SignalLineLength1)
mx = stdev(x, SignalLineLength1)
my = stdev(y, SignalLineLength1)
c = correlation(x, y, SignalLineLength1)
slope = c * (my / mx)
inter = y_ - slope * x_
LinReg1 = x * slope + inter


RSISigDirection = LinReg1 > LinReg1[1] ? 1 : 0

RSISigCross = RSI13 > LinReg1 ? 1 : 0

RSI13Above50 = RSI13 > 50 ? 1 : 0


// Trend Barmeter Color Calculation

RSI13Color = RSI13Above50 ? #288a75 : color.red

TrendBarRSI13Color = RSI13Above50 ? #288a75 : color.red

TrendBarRSISigCrossColor = RSISigCross ? #288a75 : color.red

TrendBarMACDColor = MACDHistogramCross ? #288a75 : color.red

TrendBarFastMACDColor = FastMACDHistogramCross ? #288a75 : color.red

TrendBarMACrossColor = MACrossover1 ? #288a75 : color.red

TrendBarMomOverDadColor = TopDogMomOverDad ? #288a75 : color.red

TrendBarDadDirectionColor = TopDogDadDirection ? #288a75 : color.red


TrendBar1Result = TrendBar1 == "MA Crossover" ? MACrossover1 : 
   TrendBar1 == "MACD Crossover - 12, 26, 9" ? MACDHistogramCross : 
   TrendBar1 == "MACD Crossover - Fast - 8, 21, 5" ? FastMACDHistogramCross : 
   TrendBar1 == "Mom Dad Cross (Top Dog Trading)" ? TopDogMomOverDad : 
   TrendBar1 == "DAD Direction (Top Dog Trading)" ? TopDogDadDirection : 
   TrendBar1 == "RSI Signal Line Cross - RSI 13, Sig 21" ? RSISigCross : 
   TrendBar1 == "RSI 5: > or < 50" ? RSI5Above50 : 
   TrendBar1 == "RSI 13: > or < 50" ? RSI13Above50 : 
   TrendBar1 == "Trend Candles" ? TrendBarTrend_Candle : na

TrendBar2Result = TrendBar2 == "MA Crossover" ? MACrossover1 : 
   TrendBar2 == "MACD Crossover - 12, 26, 9" ? MACDHistogramCross : 
   TrendBar2 == "MACD Crossover - Fast - 8, 21, 5" ? FastMACDHistogramCross : 
   TrendBar2 == "Mom Dad Cross (Top Dog Trading)" ? TopDogMomOverDad : 
   TrendBar2 == "DAD Direction (Top Dog Trading)" ? TopDogDadDirection : 
   TrendBar2 == "RSI Signal Line Cross - RSI 13, Sig 21" ? RSISigCross : 
   TrendBar2 == "RSI 5: > or < 50" ? RSI5Above50 : 
   TrendBar2 == "RSI 13: > or < 50" ? RSI13Above50 : 
   TrendBar2 == "Trend Candles" ? TrendBarTrend_Candle : na

TrendBar3Result = TrendBar3 == "MA Crossover" ? MACrossover1 : 
   TrendBar3 == "MACD Crossover - 12, 26, 9" ? MACDHistogramCross : 
   TrendBar3 == "MACD Crossover - Fast - 8, 21, 5" ? FastMACDHistogramCross : 
   TrendBar3 == "Mom Dad Cross (Top Dog Trading)" ? TopDogMomOverDad : 
   TrendBar3 == "DAD Direction (Top Dog Trading)" ? TopDogDadDirection : 
   TrendBar3 == "RSI Signal Line Cross - RSI 13, Sig 21" ? RSISigCross : 
   TrendBar3 == "RSI 5: > or < 50" ? RSI5Above50 : 
   TrendBar3 == "RSI 13: > or < 50" ? RSI13Above50 : 
   TrendBar3 == "Trend Candles" ? TrendBarTrend_Candle : na


TrendBars2Positive = TrendBar1Result and TrendBar2Result or TrendBar1Result and TrendBar3Result or 
   TrendBar2Result and TrendBar3Result ? 1 : 0

TrendBars2Negative = not TrendBar1Result and not TrendBar2Result or 
   not TrendBar1Result and not TrendBar3Result or 
   not TrendBar2Result and not TrendBar3Result ? 1 : 0


TrendBars3Positive =     TrendBar1Result and     TrendBar2Result and     TrendBar3Result ? 1 : 0

TrendBars3Negative = not TrendBar1Result and not TrendBar2Result and not TrendBar3Result ? 1 : 0


// Signal Filters

// FilterX          = (ema(close,15) > sma(close,15)) and (ema(close,15)[1] > sma(close,15)[1]) ?                                                                             1 : 0 
// FilterXUp        = ema(close,15) > sma(close,15)  and  ema(close, 11) > ema(close, 15)  and  ema(close,3) > ema(close,15)  and  ema(close,8) > ema(close,15) ?             1 : 0
// FilterXDown      = ema(close,15) < sma(close,15)  and  ema(close, 11) < ema(close, 15)  and  ema(close,3) < ema(close,15)  and  ema(close,8) < ema(close,15) ?             1 : 0

FilterXUp = FastMACDHistogramCross and ema(close, 15) > ema(close, 15)[1]

FilterXDown = not FastMACDHistogramCross and ema(close, 15) < ema(close, 15)[1]



TrendFilterPlus = ema(close, 15) > ema(close, 20) and ema(close, 20) > ema(close, 30) and 
   ema(close, 30) > ema(close, 40) and ema(close, 40) > ema(close, 50) ? 1 : 0

TrendFilterMinus = ema(close, 15) < ema(close, 20) and ema(close, 20) < ema(close, 30) and 
   ema(close, 30) < ema(close, 40) and ema(close, 40) < ema(close, 50) ? 1 : 0


// // Wave Trend - Conditions

// WTCross      = cross(wt1, wt2)
// WTCrossUp    = wt2 - wt1 <= 0
// WTCrossDown  = wt2 - wt1 >= 0
// WTOverSold   = wt2 <= osLevel2
// WTOverBought = wt2 >= obLevel2


MSBar1PositiveWaveTrendSignal = MSBar1 == "Filter X" ? FilterXUp and WTCross and WTCrossUp : 
   MSBar1 == "Trend Filter" ? TrendFilterPlus and WTCross and WTCrossUp : 
   MSBar1 == "Filter X + Trend Filter" ? 
   FilterXUp and TrendFilterPlus and WTCross and WTCrossUp : WTCross and WTCrossUp
MSBar1NegativeWaveTrendSignal = MSBar1 == "Filter X" ? FilterXDown and WTCross and WTCrossDown : 
   MSBar1 == "Trend Filter" ? TrendFilterMinus and WTCross and WTCrossDown : 
   MSBar1 == "Filter X + Trend Filter" ? 
   FilterXDown and TrendFilterMinus and WTCross and WTCrossDown : 
   WTCross and WTCrossDown

MSBar2PositiveWaveTrendSignal = MSBar2 == "Filter X" ? FilterXUp and WTCross and WTCrossUp : 
   MSBar2 == "Trend Filter" ? TrendFilterPlus and WTCross and WTCrossUp : 
   MSBar2 == "Filter X + Trend Filter" ? 
   FilterXUp and TrendFilterPlus and WTCross and WTCrossUp : WTCross and WTCrossUp
MSBar2NegativeWaveTrendSignal = MSBar2 == "Filter X" ? FilterXDown and WTCross and WTCrossDown : 
   MSBar2 == "Trend Filter" ? TrendFilterMinus and WTCross and WTCrossDown : 
   MSBar2 == "Filter X + Trend Filter" ? 
   FilterXDown and TrendFilterMinus and WTCross and WTCrossDown : 
   WTCross and WTCrossDown




BackgroundColorChangePositive = TrendBars3Positive and not TrendBars3Positive[1]
BackgroundColorChangeNegative = TrendBars3Negative and not TrendBars3Negative[1]

// Signals Color Calculations

MSBar1Color = MSBar1PositiveWaveTrendSignal ? #288a75 : 
   MSBar1NegativeWaveTrendSignal ? color.red : na

MSBar2Color = BackgroundColorChangePositive ? #288a75 : 
   BackgroundColorChangeNegative ? color.red : na


// Trend Barmeter Color Assignments

TrendBar1Color = TrendBar1 == "N/A" ? na : 
   TrendBar1 == "MACD Crossover - 12, 26, 9" ? TrendBarMACDColor : 
   TrendBar1 == "MACD Crossover - Fast - 8, 21, 5" ? TrendBarFastMACDColor : 
   TrendBar1 == "Mom Dad Cross (Top Dog Trading)" ? TrendBarMomOverDadColor : 
   TrendBar1 == "DAD Direction (Top Dog Trading)" ? TrendBarDadDirectionColor : 
   TrendBar1 == "RSI Signal Line Cross - RSI 13, Sig 21" ? TrendBarRSISigCrossColor : 
   TrendBar1 == "RSI 5: > or < 50" ? TrendBarRSI5Color : 
   TrendBar1 == "RSI 13: > or < 50" ? TrendBarRSI13Color : 
   TrendBar1 == "Trend Candles" ? TrendBarTrend_Candle_Color : 
   TrendBar1 == "MA Crossover" ? TrendBarMACrossColor : na

TrendBar2Color = TrendBar2 == "N/A" ? na : 
   TrendBar2 == "MACD Crossover - 12, 26, 9" ? TrendBarMACDColor : 
   TrendBar2 == "MACD Crossover - Fast - 8, 21, 5" ? TrendBarFastMACDColor : 
   TrendBar2 == "Mom Dad Cross (Top Dog Trading)" ? TrendBarMomOverDadColor : 
   TrendBar2 == "DAD Direction (Top Dog Trading)" ? TrendBarDadDirectionColor : 
   TrendBar2 == "RSI Signal Line Cross - RSI 13, Sig 21" ? TrendBarRSISigCrossColor : 
   TrendBar2 == "RSI 5: > or < 50" ? TrendBarRSI5Color : 
   TrendBar2 == "RSI 13: > or < 50" ? TrendBarRSI13Color : 
   TrendBar2 == "Trend Candles" ? TrendBarTrend_Candle_Color : 
   TrendBar2 == "MA Crossover" ? TrendBarMACrossColor : na

TrendBar3Color = TrendBar3 == "N/A" ? na : 
   TrendBar3 == "MACD Crossover - 12, 26, 9" ? TrendBarMACDColor : 
   TrendBar3 == "MACD Crossover - Fast - 8, 21, 5" ? TrendBarFastMACDColor : 
   TrendBar3 == "Mom Dad Cross (Top Dog Trading)" ? TrendBarMomOverDadColor : 
   TrendBar3 == "DAD Direction (Top Dog Trading)" ? TrendBarDadDirectionColor : 
   TrendBar3 == "RSI Signal Line Cross - RSI 13, Sig 21" ? TrendBarRSISigCrossColor : 
   TrendBar3 == "RSI 5: > or < 50" ? TrendBarRSI5Color : 
   TrendBar3 == "RSI 13: > or < 50" ? TrendBarRSI13Color : 
   TrendBar3 == "Trend Candles" ? TrendBarTrend_Candle_Color : 
   TrendBar3 == "MA Crossover" ? TrendBarMACrossColor : na


CrossoverType2 = TrendBar4 == "DAD Direction (Top Dog Trading)" ? TopDogDadDirection : 
   TrendBar4 == "MACD Crossover" ? MACDHistogramCross : 
   TrendBar4 == "MA Direction - Fast MA - TB1" ? MA1Direction : 
   TrendBar4 == "MA Direction - Slow MA - TB1" ? MA2Direction : MACrossover1

color_1 = color.new(color.green, 15)
color_2 = color.new(color.red, 20)
TrendBar4Color1 = TrendBar4 == "N/A" ? na : CrossoverType2 ? color_1 : color_2

// TrendBar4Color2   = TrendBar4=="N/A" ?     na : TrendBar4=="DAD Direction (Top Dog Trading)" and TopDogDadDirectandMomOverZero ? color(green, 70) : TrendBar4=="DAD Direction (Top Dog Trading)" and TopDogDadDirectandMomUnderZero ? color(red, 70) : TrendBar4=="MACD Crossover - 12, 26, 9" and MACDLineOverZeroandHistogramCross ? color(green, 70) : TrendBar4=="MACD Crossover - 12, 26, 9" and MACDLineUnderZeroandHistogramCross ? color(red, 70) : TrendBar4=="MA Crossover" and CrossoverType2 ? color(green, 40) : TrendBar4=="MA Crossover" and not CrossoverType2 ? color(red, 40) : TrendBar4=="MA Direction - Fast MA" and CrossoverType2 ? color(green, 40) : TrendBar4=="MA Direction - Fast MA" and not CrossoverType2 ? color(red, 40) : na


CrossoverType3 = TrendBar5 == "DAD Direction (Top Dog Trading)" ? TopDogDadDirection : 
   TrendBar5 == "MACD Crossover" ? MACDHistogramCross : 
   TrendBar5 == "MA Direction - Fast MA - TB2" ? MA3Direction : 
   TrendBar5 == "MA Direction - Slow MA - TB2" ? MA4Direction : MACrossover2

color_3 = color.new(color.green, 15)
color_4 = color.new(color.red, 20)
TrendBar5Color1 = TrendBar5 == "N/A" ? na : CrossoverType3 ? color_3 : color_4

// TrendBar5Color2   = TrendBar5=="N/A" ?     na : TrendBar5=="DAD Direction (Top Dog Trading)" and TopDogDadDirectandMomOverZero ? color(green, 70) : TrendBar5=="DAD Direction (Top Dog Trading)" and TopDogDadDirectandMomUnderZero ? color(red, 70) : TrendBar5=="MACD Crossover - 12, 26, 9" and MACDLineOverZeroandHistogramCross ? color(green, 70) : TrendBar5=="MACD Crossover - 12, 26, 9" and MACDLineUnderZeroandHistogramCross ? color(red, 70) : TrendBar5=="MA Crossover" and CrossoverType3 ? color(green, 40) : TrendBar5=="MA Crossover" and not CrossoverType3 ? color(red, 40) : TrendBar5=="MA Direction - Fast MA" and CrossoverType3 ? color(green, 40) : TrendBar5=="MA Direction - Fast MA" and not CrossoverType3 ? color(red, 40) : na


// Momentum Setup Plots 






// Background Highlights



TrendBar3BarsSame = TrendBars3Positive ? color.green : TrendBars3Negative ? color.red : na

TMa = hline(113.7, color=color.new(color.white, 100))

TMb = hline(131.3, color=color.new(color.white, 100))





TrendMetersNoLongerAlign = ((not TrendBars3Positive or not TrendBars3Negative) and TrendBars3Positive[1]) or ((not TrendBars3Positive or not TrendBars3Negative) and TrendBars3Negative[1])




RapidColorChangePositive = TrendBars3Positive and (TrendBars3Negative[1] or TrendBars3Negative[2])
RapidColorChangeNegative = TrendBars3Negative and (TrendBars3Positive[1] or TrendBars3Positive[2])

MaxValueMACrossUp   = crossover( ema(Close, 5), ema(Close, 11))
MaxValueMACrossDown = crossunder(ema(Close, 5), ema(Close, 11))


TB1MACrossUp   = crossover( MA1, MA2)
TB1MACrossDown = crossunder(MA1, MA2)




TB2MACrossUp   = crossover(MA3, MA4)
TB2MACrossDown = crossunder(MA3, MA4)




TB1Green  = MA1 > MA2
TB1Red    = MA1 < MA2

TB2Green  = MA3 > MA4
TB2Red    = MA3 < MA4

TB12Green = TB1Green and TB2Green and (TB1MACrossUp   or TB2MACrossUp)
TB12Red   = TB1Red   and TB2Red   and (TB1MACrossDown or TB2MACrossDown)





///////////////////////QQE MOD///////////////////////

RSI_Period = input(6, title='RSI Length')
SF = input(5, title='RSI Smoothing')
QQE = input(3, title='Fast QQE Factor')
ThreshHold = input(3, title="Thresh-hold")
//

src_QQE = input(close, title="RSI Source")
//

//
Wilders_Period = RSI_Period * 2 - 1


Rsi = rsi(src_QQE, RSI_Period)
RsiMa = ema(Rsi, SF)
AtrRsi = abs(RsiMa[1] - RsiMa)
MaAtrRsi = ema(AtrRsi, Wilders_Period)
dar = ema(MaAtrRsi, Wilders_Period) * QQE

longband = 0.0
shortband = 0.0
trend = 0

DeltaFastAtrRsi = dar
RSIndex = RsiMa
newshortband = RSIndex + DeltaFastAtrRsi
newlongband = RSIndex - DeltaFastAtrRsi
longband := RSIndex[1] > longband[1] and RSIndex > longband[1] ? 
   max(longband[1], newlongband) : newlongband
shortband := RSIndex[1] < shortband[1] and RSIndex < shortband[1] ? 
   min(shortband[1], newshortband) : newshortband
cross_1 = cross(longband[1], RSIndex)
trend := cross(RSIndex, shortband[1]) ? 1 : cross_1 ? -1 : nz(trend[1], 1)
FastAtrRsiTL = trend == 1 ? longband : shortband
////////////////////


length = input(50, minval=1, title="Bollinger Length")
mult = input(0.35, minval=0.001, maxval=5, step=0.1, title="BB Multiplier")
basis = sma(FastAtrRsiTL - 50, length)
dev = mult * stdev(FastAtrRsiTL - 50, length)
upper = basis + dev
lower = basis - dev
color_bar = RsiMa - 50 > upper ? #00c3ff : RsiMa - 50 < lower ? #ff0062 : color.gray


//
// Zero cross
QQEzlong = 0
QQEzlong := nz(QQEzlong[1])
QQEzshort = 0
QQEzshort := nz(QQEzshort[1])
QQEzlong := RSIndex >= 50 ? QQEzlong + 1 : 0
QQEzshort := RSIndex < 50 ? QQEzshort + 1 : 0
//  

Zero = hline(0, color=color.white, linestyle=hline.style_dotted, linewidth=1)

////////////////////////////////////////////////////////////////

RSI_Period2 = input(6, title='RSI Length')
SF2 = input(5, title='RSI Smoothing')
QQE2 = input(1.61, title='Fast QQE2 Factor')
ThreshHold2 = input(3, title="Thresh-hold")

src2 = input(close, title="RSI Source")
//

//
Wilders_Period2 = RSI_Period2 * 2 - 1


Rsi2 = rsi(src2, RSI_Period2)
RsiMa2 = ema(Rsi2, SF2)
AtrRsi2 = abs(RsiMa2[1] - RsiMa2)
MaAtrRsi2 = ema(AtrRsi2, Wilders_Period2)
dar2 = ema(MaAtrRsi2, Wilders_Period2) * QQE2
longband2 = 0.0
shortband2 = 0.0
trend2 = 0

DeltaFastAtrRsi2 = dar2
RSIndex2 = RsiMa2
newshortband2 = RSIndex2 + DeltaFastAtrRsi2
newlongband2 = RSIndex2 - DeltaFastAtrRsi2
longband2 := RSIndex2[1] > longband2[1] and RSIndex2 > longband2[1] ? 
   max(longband2[1], newlongband2) : newlongband2
shortband2 := RSIndex2[1] < shortband2[1] and RSIndex2 < shortband2[1] ? 
   min(shortband2[1], newshortband2) : newshortband2
cross_2 = cross(longband2[1], RSIndex2)
trend2 := cross(RSIndex2, shortband2[1]) ? 1 : cross_2 ? -1 : nz(trend2[1], 1)
FastAtrRsi2TL = trend2 == 1 ? longband2 : shortband2


//
// Zero cross
QQE2zlong = 0
QQE2zlong := nz(QQE2zlong[1])
QQE2zshort = 0
QQE2zshort := nz(QQE2zshort[1])
QQE2zlong := RSIndex2 >= 50 ? QQE2zlong + 1 : 0
QQE2zshort := RSIndex2 < 50 ? QQE2zshort + 1 : 0
//  

hcolor2 = RsiMa2 - 50 > ThreshHold2 ? color.silver :
   RsiMa2 - 50 < 0 - ThreshHold2 ? color.silver : na
plot(FastAtrRsi2TL - 50, title='QQE Line', color=color.white, transp=0, linewidth=2)
plot(RsiMa2 - 50, color=hcolor2, transp=50, title='Histo2', style=plot.style_columns)

Greenbar1 = RsiMa2 - 50 > ThreshHold2
Greenbar2 = RsiMa - 50 > upper

Redbar1 = RsiMa2 - 50 < 0 - ThreshHold2
Redbar2 = RsiMa - 50 < lower
plot(Greenbar1 and Greenbar2 == 1 ? RsiMa2 - 50 : na, title="QQE Up", style=plot.style_columns, color=#00c3ff, transp=0)
plot(Redbar1 and Redbar2 == 1 ? RsiMa2 - 50 : na, title="QQE Down", style=plot.style_columns, color=#ff0062, transp=0)


///////////////////////DONCHIAN TREND RIBBON///////////////////////

// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ¬© LonesomeTheBlue

//@version=4

dlen = input(defval = 20, title = "Donchian Channel Period", minval = 10)

dchannel(len)=>
    float hh = highest(len)
    float ll = lowest(len)
    
    int trend = 0
    trend := close > hh[1] ? 1 : close < ll[1] ? -1 : nz(trend[1])
    
dchannelalt(len, maintrend)=>
    float hh = highest(len)
    float ll = lowest(len)
    
    int trend = 0
    trend := close > hh[1] ? 1 : close < ll[1] ? -1 : nz(trend[1])
    maintrend == 1  ? trend == 1  ? #00FF00ff :  #00FF009f :
     maintrend == -1 ? trend == -1 ? #FF0000ff :  #FF00009f :
     na

maintrend = dchannel(dlen)

///////////////////////VERVOOT HEIKIN ASHI///////////////////////

lengthVer = input(defval=55, title="TEMA Period")
emaLength = input(defval=60, title="EMA Period")
candleSizeFactor = input(defval=1.1, title="Candle size factor")
overlayMode=input(false)
calc_tema(src, length) =>
	ema1 = ema(src, length)
	ema2 = ema(ema1, length)
	ema3 = ema(ema2, length)
	3 * (ema1 - ema2) + ema3
var haOpen = 0.0
var haClose = 0.0
var upwWithOffset = false
var neutralSig = false

haOpen := nz((haOpen[1] + ohlc4) / 2, ohlc4)
haClose := (haOpen + max(high, haOpen) + min(low, haOpen) + ohlc4) / 4
thaClose = calc_tema(haClose, lengthVer)
thl2 = calc_tema(hl2, lengthVer)
haCloseSmooth = 2 * thaClose - calc_tema(thaClose, lengthVer)
hl2Smooth = 2 * thl2 - calc_tema(thl2, lengthVer)
shortCandle = abs(close - open) < ((high - low) * candleSizeFactor)
keepn1 = ((haClose >= haOpen) and (haClose[1] >= haOpen[1])) or (close >= haClose) or (high > high[1]) or (low > low[1]) or (hl2Smooth >= haCloseSmooth)
keepall1 = keepn1 or (keepn1[1] and (close >= open) or (close >= close[1]))
keep13 = shortCandle and (high >= low[1])
utr = keepall1 or (keepall1[1] and keep13)
keepn2 = (haClose < haOpen) and (haClose[1] < haOpen[1]) or (hl2Smooth < haCloseSmooth)
keep23 = shortCandle and (low <= high[1])
keepall2 = keepn2 or (keepn2[1] and (close < open) or (close < close[1]))
dtr = keepall2 or (keepall2[1] and keep23)
upw = dtr == 0 and dtr[1] and utr
dnw = utr == 0 and utr[1] and dtr
upwWithOffset := upw != dnw ? upw : nz(upwWithOffset[1])

buySig = upw or (not dnw and (na(upwWithOffset) ? 0 : upwWithOffset))
ltSellSig = close < ema(close, emaLength)
neutralSig := buySig or (ltSellSig ? 0 : nz(neutralSig[1]))
hacolt = buySig ? 1 : neutralSig ? 0 : -1


///////////////////////STC INDICATOR///////////////////////

EEEEEE = input(12, 'Length')
BBBB = input(26, 'FastLength')
BBBBB = input(50, 'SlowLength')

AAAA(BBB, BBBB, BBBBB) =>
    fastMA = ema(BBB, BBBB)
    slowMA = ema(BBB, BBBBB)
    AAAA = fastMA - slowMA
    AAAA

AAAAA(EEEEEE, BBBB, BBBBB) =>
    AAA = input(0.5)
    var CCCCC = 0.0
    var DDD = 0.0
    var DDDDDD = 0.0
    var EEEEE = 0.0
    BBBBBB = AAAA(close, BBBB, BBBBB)
    CCC = lowest(BBBBBB, EEEEEE)
    CCCC = highest(BBBBBB, EEEEEE) - CCC
    CCCCC := CCCC > 0 ? (BBBBBB - CCC) / CCCC * 100 : nz(CCCCC[1])
    DDD := na(DDD[1]) ? CCCCC : DDD[1] + AAA * (CCCCC - DDD[1])
    DDDD = lowest(DDD, EEEEEE)
    DDDDD = highest(DDD, EEEEEE) - DDDD
    DDDDDD := DDDDD > 0 ? (DDD - DDDD) / DDDDD * 100 : nz(DDDDDD[1])
    EEEEE := na(EEEEE[1]) ? DDDDDD : EEEEE[1] + AAA * (DDDDDD - EEEEE[1])
    EEEEE

mAAAAA = AAAAA(EEEEEE, BBBB, BBBBB)
mColor = mAAAAA > mAAAAA[1] ? color.new(color.green, 20) : color.new(color.red, 20)



if mAAAAA[3] <= mAAAAA[2] and mAAAAA[2] > mAAAAA[1] and mAAAAA > 75
    alert("Red", alert.freq_once_per_bar)
if mAAAAA[3] >= mAAAAA[2] and mAAAAA[2] < mAAAAA[1] and mAAAAA < 25
    alert("Green", alert.freq_once_per_bar)


plot(mAAAAA, color=mColor, title='STC', linewidth=2)

ul = plot(25, color=color.new(color.gray, 70))
ll = plot(75, color=color.new(color.gray, 70))
fill(ul, ll, color=color.new(color.gray, 96))


///////////////////////TDI INDICATOR///////////////////////

rsiPeriod = input(11, minval = 1, title = "RSI Period")
bandLength = input(31, minval = 1, title = "Band Length")
lengthrsipl = input(1, minval = 0, title = "Fast MA on RSI")
lengthtradesl = input(9, minval = 1, title = "Slow MA on RSI")

src_TDI = close                                                             // Source of Calculations (Close of Bar)
r = rsi(src_TDI, rsiPeriod)                                                 // RSI of Close
ma = sma(r, bandLength)                                                 // Moving Average of RSI [current]
offs = (1.6185 * stdev(r, bandLength))                                  // Offset
up = ma + offs                                                          // Upper Bands
dn = ma - offs                                                          // Lower Bands
mid = (up + dn) / 2                                                     // Average of Upper and Lower Bands
fastMA = sma(r, lengthrsipl)                                            // Moving Average of RSI 2 bars back
slowMA = sma(r, lengthtradesl)                                          // Moving Average of RSI 7 bars back

hline(30)                                                               // Oversold
hline(50)                                                               // Midline
hline(70)                                                               // Overbought

upl = plot(up, "Upper Band", color = color.blue)                              // Upper Band
dnl = plot(dn, "Lower Band", color = color.blue)                              // Lower Band
midl = plot(mid, "Middle of Bands", color = color.orange, linewidth = 2)      // Middle of Bands

plot(slowMA, "Slow MA", color=color.green, linewidth=2)                       // Plot Slow MA
plot(fastMA, "Fast MA", color=color.red, linewidth=2)                         // Plot Fast MA

fill(upl, midl, color.red, transp=90)                                         // Fill Upper Half Red
fill(midl, dnl, color.green, transp=90)          


///////////////////////VOLATILITY OSCILLATOR///////////////////////

vol_length = input(100)
spike = close - open
x_vol = stdev(spike,vol_length)
y_vol = stdev(spike,vol_length) * -1

plot(spike, color = color.white, linewidth = 2, title = "Spike Linel")

p1 = plot(x_vol, "Upper Line")
p2 = plot(y_vol, "Lower Line")

plot(0, color= color.gray, title= "Zero Line")

plot(spike, color= color.blue, style=plot.style_area, transp=80, title = "Spike Fill")

osc2 = spike

lbR = 5
lbL = 5
rangeUpper =60
rangeLower = 5
plotBull = input(title="Plot Bullish", defval=true)
plotHiddenBull = input(title="Plot Hidden Bullish", defval=false)
plotBear = input(title="Plot Bearish", defval=true)
plotHiddenBear = input(title="Plot Hidden Bearish", defval=false)
delay_plot_til_closed = input(title="Delay diversion plot until candle is closed (don't repaint)", defval=false)
bearColor = color.red
bullColor = color.green
hiddenBullColor = color.new(color.green, 80)
hiddenBearColor = color.new(color.red, 80)
textColor = color.white
noneColor = color.new(color.white, 100)

repaint = (not(delay_plot_til_closed) or barstate.ishistory or barstate.isconfirmed)

plFound = na(pivotlow(osc2, lbL, lbR)) ? false : true
phFound = na(pivothigh(osc2, lbL, lbR)) ? false : true
_inRange(cond) =>
	bars = barssince(cond == true)
	rangeLower <= bars and bars <= rangeUpper

//------------------------------------------------------------------------------
// Regular Bullish
// Osc: Higher Low

oscHL = osc2[lbR] > valuewhen(plFound, osc2[lbR], 1) and _inRange(plFound[1])

// Price: Lower Low

priceLL = low[lbR] < valuewhen(plFound, low[lbR], 1)
bullCond = plotBull and priceLL and oscHL and plFound and repaint


plotshape(
	 bullCond ? osc2[lbR] : na,
	 offset=-lbR,
	 title="Regular Bullish Label",
	 text="R",
	 style=shape.labelup,
	 location=location.absolute,
	 color=bullColor,
	 textcolor=textColor,
	 transp=0
	 )

//------------------------------------------------------------------------------
// Hidden Bullish
// Osc: Lower Low

oscLL = osc2[lbR] < valuewhen(plFound, osc2[lbR], 1) and _inRange(plFound[1])

// Price: Higher Low

priceHL = low[lbR] > valuewhen(plFound, low[lbR], 1)
hiddenBullCond = plotHiddenBull and priceHL and oscLL and plFound and repaint



plotshape(
	 hiddenBullCond ? osc2[lbR] : na,
	 offset=-lbR,
	 title="Hidden Bullish Label",
	 text="H",
	 style=shape.labelup,
	 location=location.absolute,
	 color=bullColor,
	 textcolor=textColor,
	 transp=0
	 )

//------------------------------------------------------------------------------
// Regular Bearish
// Osc: Lower High

oscLH = osc2[lbR] < valuewhen(phFound, osc2[lbR], 1) and _inRange(phFound[1])

// Price: Higher High

priceHH = high[lbR] > valuewhen(phFound, high[lbR], 1)

bearCond = plotBear and priceHH and oscLH and phFound and repaint



plotshape(
	 bearCond ? osc2[lbR] : na,
	 offset=-lbR,
	 title="Regular Bearish Label",
	 text="R",
	 style=shape.labeldown,
	 location=location.absolute,
	 color=bearColor,
	 textcolor=textColor,
	 transp=0
	 )

//------------------------------------------------------------------------------
// Hidden Bearish
// Osc: Higher High

oscHH = osc2[lbR] > valuewhen(phFound, osc2[lbR], 1) and _inRange(phFound[1])

// Price: Lower High

priceLH = high[lbR] < valuewhen(phFound, high[lbR], 1)

hiddenBearCond = plotHiddenBear and priceLH and oscHH and phFound and repaint



plotshape(
	 hiddenBearCond ? osc2[lbR] : na,
	 offset=-lbR,
	 title="Hidden Bearish Label",
	 text="H",
	 style=shape.labeldown,
	 location=location.absolute,
	 color=bearColor,
	 textcolor=textColor,
	 transp=0
	 )





///////////////////////VOLUME SMA///////////////////////

volume_sma_period = input(defval=40, title="Volume SMA Period", group="VOLUME SMA", step=1)
volume_sma = sma(volume, volume_sma_period)



///////////////////////CONFIG///////////////////////


USE_SMMA_ANGLE  = input(defval=1, options= [1, 0], title="Use SMMA Angle Long", group="CONFIG LONG")
USE_SMMA_ORDER  = input(defval=1, options= [1, 0], title="Use SMMA Order Long", group="CONFIG LONG")
USE_PSAR        = input(defval=1, options= [1, 0], title="Use PSAR Long", group="CONFIG LONG")        
USE_VOLUME      = input(defval=1, options= [1, 0], title="Use Volume Long", group="CONFIG LONG")
USE_PARROT      = input(defval=1, options= [1, 0], title="Use Parrot Long", group="CONFIG LONG")
USE_TREND_METER = input(defval=1, options= [1, 0], title="Use Trend Meter Long", group="CONFIG LONG")
USE_QQE         = input(defval=1, options= [1, 0], title="Use QQE Mod Long", group="CONFIG LONG")
USE_DONCHIAN    = input(defval=1, options= [1, 0], title="Use Donchian Ribbon Long", group="CONFIG LONG")
USE_VERVOORT    = input(defval=1, options= [1, 0], title="Use Vervoort HA Long", group="CONFIG LONG")
USE_STC         = input(defval=1, options= [1, 0], title="Use STC Long", group="CONFIG LONG")
USE_VOLATILITY  = input(defval=1, options= [1, 0], title="Use Volatility Oscillator Long", group="CONFIG LONG")
USE_TDI         = input(defval=1, options= [1, 0], title="Use TDI Long", group="CONFIG LONG")
USE_CANDLE      = input(defval=1, options= [1, 0], title="Use Candle above SMMA Long", group="CONFIG LONG")

PROFIT_TARGET_LONG      = 1 + (input(defval=1.0, step=0.1, title="Profit Target Long", group="CONFIG LONG")/100)
STOP_LOSS_LONG      = 1 - (input(defval=1.0, step=0.1, title="Stop Loss Long", group="CONFIG LONG")/100)



USE_SMMA_ANGLE_SHORT  = input(defval=1, options= [1, 0], title="Use SMMA Angle Short", group="CONFIG SHORT")
USE_SMMA_ORDER_SHORT  = input(defval=1, options= [1, 0], title="Use SMMA Order Short", group="CONFIG SHORT")
USE_PSAR_SHORT        = input(defval=1, options= [1, 0], title="Use PSAR Short", group="CONFIG SHORT")        
USE_VOLUME_SHORT      = input(defval=1, options= [1, 0], title="Use Volume Short", group="CONFIG SHORT")
USE_PARROT_SHORT      = input(defval=1, options= [1, 0], title="Use Parrot Short", group="CONFIG SHORT")
USE_TREND_METER_SHORT = input(defval=1, options= [1, 0], title="Use Trend Meter Short", group="CONFIG SHORT")
USE_QQE_SHORT         = input(defval=1, options= [1, 0], title="Use QQE Mod Short", group="CONFIG SHORT")
USE_DONCHIAN_SHORT    = input(defval=1, options= [1, 0], title="Use Donchian Ribbon Short", group="CONFIG SHORT")
USE_VERVOORT_SHORT    = input(defval=1, options= [1, 0], title="Use Vervoort HA Short", group="CONFIG SHORT")
USE_STC_SHORT         = input(defval=1, options= [1, 0], title="Use STC Short", group="CONFIG SHORT")
USE_VOLATILITY_SHORT  = input(defval=1, options= [1, 0], title="Use Volatility Oscillator Short", group="CONFIG SHORT")
USE_TDI_SHORT         = input(defval=1, options= [1, 0], title="Use TDI Short", group="CONFIG SHORT")
USE_CANDLE_SHORT      = input(defval=1, options= [1, 0], title="Use Candle below SMMA Short", group="CONFIG SHORT")

PROFIT_TARGET_SHORT      = 1- (input(defval=1.0, step=0.1, title="Profit Target Short", group="CONFIG SHORT")/100)
STOP_LOSS_SHORT      = 1+ (input(defval=1.0, step=0.1, title="Stop Loss Short", group="CONFIG SHORT")/100)









///////////////////////CONDITIONS///////////////////////

/// SMMA FASTEST LIPS; FAST TEETH; SLOW JAW


var SMMA_CONDITION = false

SMMA_LONG_ANGLE_SLOW = jaw - jaw[1] > 3
SMMA_LONG_ANGLE_FAST = teeth - teeth[1] > 3
SMMA_LONG_ANGLE_FASTEST = lips - lips[1] > 3

SMMA_CONDITION_LONG = lips > teeth and teeth > jaw


SMMA_SHORT_ANGLE_SLOW = jaw[1] - jaw > 3
SMMA_SHORT_ANGLE_FAST = teeth[1] - teeth > 3
SMMA_SHORT_ANGLE_FASTEST = lips[1] - lips > 3

SMMA_CONDITION_SHORT = lips < teeth and teeth < jaw



if USE_SMMA_ANGLE == 0
    SMMA_LONG_ANGLE_SLOW := true    
    SMMA_LONG_ANGLE_FAST := true
    SMMA_LONG_ANGLE_FASTEST := true
    
if USE_SMMA_ANGLE_SHORT == 0   
    SMMA_SHORT_ANGLE_SLOW := true    
    SMMA_SHORT_ANGLE_FAST := true
    SMMA_SHORT_ANGLE_FASTEST := true
    
if USE_SMMA_ORDER == 0
    SMMA_CONDITION_LONG := true
    
if USE_SMMA_ORDER_SHORT == 0   
    SMMA_CONDITION_SHORT := true
    
    

    
/// PSAR


PSAR_CONDITION_LONG = out < close


PSAR_CONDITION_SHORT = out > close

if USE_PSAR == 0
    PSAR_CONDITION_LONG := true
    
if USE_PSAR_SHORT == 0   
    PSAR_CONDITION_SHORT := true

/// VOLUME


VOLUME_CONDITION_LONG = volume > volume_sma and close > open

VOLUME_CONDITION_SHORT = volume > volume_sma and close < open

if USE_VOLUME == 0
    VOLUME_CONDITION_LONG := true
    
if USE_VOLUME_SHORT == 0   
    VOLUME_CONDITION_SHORT := true


/// ULTRAFAST PARROT

ULTRA_LONG_HIST =  belowsignal and tsi_hist >= tsi_hist[1] ? false : belowsignal and tsi_hist < tsi_hist[1] ? false : tsi_hist < tsi_hist[1] ? false : true
ULTRA_LONG_TSI = belowsignal ? false : true

ULTRA_SHORT_HIST =  belowsignal and tsi_hist >= tsi_hist[1] ? true : belowsignal and tsi_hist < tsi_hist[1] ? true : tsi_hist < tsi_hist[1] ? false : false
ULTRA_SHORT_TSI = belowsignal ? true : false


if USE_PARROT == 0
    ULTRA_LONG_HIST := true
    ULTRA_LONG_TSI := true
    
if USE_PARROT_SHORT == 0  
    ULTRA_SHORT_HIST := true
    ULTRA_SHORT_TSI := true

/// TREND METER


TM_WAVE_LONG = MSBar1Color == #288a75? true: false
TM_ALL_3_LONG = MSBar2Color == #288a75?true: false
TM_1_LONG = TrendBar1Color == #288a75?true: false
TM_2_LONG = TrendBar2Color == #288a75?true: false
TM_3_LONG = TrendBar3Color == #288a75?true: false
TM_TB_4_LONG = TrendBar4Color1 == color_1? true: false
TM_TB_5_LONG = TrendBar5Color1 == color_3? true: false


TM_WAVE_SHORT = MSBar1Color == color.red? true: false
TM_ALL_3_SHORT = MSBar2Color == color.red?true: false
TM_1_SHORT = TrendBar1Color == color.red?true: false
TM_2_SHORT = TrendBar2Color == color.red?true: false
TM_3_SHORT = TrendBar3Color == color.red?true: false
TM_TB_4_SHORT = TrendBar4Color1 == color_2? true: false
TM_TB_5_SHORT = TrendBar5Color1 == color_4? true: false


if USE_TREND_METER == 0
    TM_WAVE_LONG := true
    TM_ALL_3_LONG := true
    TM_1_LONG := true
    TM_2_LONG := true
    TM_3_LONG := true
    TM_TB_4_LONG := true
    TM_TB_5_LONG := true
    
if USE_TREND_METER_SHORT == 0   
    TM_WAVE_SHORT := true
    TM_ALL_3_SHORT := true
    TM_1_SHORT := true
    TM_2_SHORT := true
    TM_3_SHORT := true
    TM_TB_4_SHORT := true
    TM_TB_5_SHORT := true
/// QQE MOD


QQE_LINE_LONG = (FastAtrRsi2TL - 50) > 0
QQE_BAR_LONG = Greenbar1 and Greenbar2 == 1 ? true: false


QQE_LINE_SHORT = (FastAtrRsi2TL - 50) < 0
QQE_BAR_SHORT = Redbar1 and Redbar2 == 1 ? true: false

if USE_QQE == 0
    QQE_LINE_LONG := true
    QQE_BAR_LONG := true
    
if USE_QQE_SHORT == 0    
    QQE_LINE_SHORT := true
    QQE_BAR_SHORT := true
    


/// DONCHIAN


DONCHIAN_5_LONG = dchannelalt(dlen - 0, maintrend) == #00FF009f? true:  dchannelalt(dlen - 0, maintrend) == #00FF00ff? true: false


DONCHIAN_5_SHORT = dchannelalt(dlen - 0, maintrend) == #FF0000ff? true: dchannelalt(dlen - 0, maintrend) == #FF00009f? true: false


if USE_DONCHIAN == 0
    DONCHIAN_5_LONG := true
    
if USE_DONCHIAN_SHORT == 0    
    DONCHIAN_5_SHORT := true

/// VERVOORT


VERVOORT_LONG = hacolt>0? true: false


VERVOORT_SHORT = hacolt<0? true: false

if USE_VERVOORT == 0
    VERVOORT_LONG := true
    
if USE_VERVOORT_SHORT == 0    
    VERVOORT_SHORT := true

/// STC


STC_LONG = mAAAAA > mAAAAA[1]? true: false


STC_SHORT = mAAAAA > mAAAAA[1]? false: true

if USE_STC == 0
    STC_LONG := true
    
if USE_STC_SHORT == 0    
    STC_SHORT := true

/// VOLATILITY OSC


VOLATILITY_OSC_LONG = spike > x_vol? true: false


VOLATILITY_OSC_SHORT = spike < y_vol? true: false

if USE_VOLATILITY == 0
    VOLATILITY_OSC_LONG := true
    
if USE_VOLATILITY_SHORT == 0   
    VOLATILITY_OSC_SHORT := true

/// TDI


TDI_LONG = fastMA > slowMA and slowMA > mid


TDI_SHORT = fastMA < slowMA and slowMA < mid

if USE_TDI == 0
    TDI_LONG := true
    
if USE_TDI_SHORT == 0    
    TDI_SHORT := true

/// CANDLE


CANDLE_LONG = close > lips? true: false


CANDLE_SHORT = close < lips? true: false

if USE_CANDLE == 0
    CANDLE_LONG := true
    
if USE_CANDLE_SHORT == 0   
    CANDLE_SHORT := true




if strategy.position_size == 0
    if SMMA_LONG_ANGLE_SLOW and SMMA_LONG_ANGLE_FAST and SMMA_LONG_ANGLE_FASTEST and SMMA_CONDITION_LONG and PSAR_CONDITION_LONG and VOLUME_CONDITION_LONG and ULTRA_LONG_HIST and ULTRA_LONG_TSI 
        if TM_WAVE_LONG and TM_ALL_3_LONG and TM_1_LONG and TM_2_LONG and TM_3_LONG and TM_TB_4_LONG and TM_TB_5_LONG and QQE_LINE_LONG and QQE_BAR_LONG and DONCHIAN_5_LONG and VERVOORT_LONG and STC_LONG
            if VOLATILITY_OSC_LONG and TDI_LONG and CANDLE_LONG
                strategy.entry("long entry", long)
                

if strategy.position_size > 0
    if close > (strategy.position_avg_price * PROFIT_TARGET_LONG)
        strategy.close_all()
        

if strategy.position_size > 0
    if close < (strategy.position_avg_price * STOP_LOSS_LONG)
        strategy.close_all()
        
        
        
        
        

if strategy.position_size == 0
    if SMMA_SHORT_ANGLE_SLOW and SMMA_SHORT_ANGLE_FAST and SMMA_SHORT_ANGLE_FASTEST and SMMA_CONDITION_SHORT and PSAR_CONDITION_SHORT and VOLUME_CONDITION_SHORT and ULTRA_SHORT_HIST and ULTRA_SHORT_TSI 
        if TM_WAVE_SHORT and TM_ALL_3_SHORT and TM_1_SHORT and TM_2_SHORT and TM_3_SHORT and TM_TB_4_SHORT and TM_TB_5_SHORT and QQE_LINE_SHORT and QQE_BAR_SHORT and DONCHIAN_5_SHORT and VERVOORT_SHORT and STC_SHORT
            if VOLATILITY_OSC_SHORT and TDI_SHORT and CANDLE_SHORT
                strategy.entry("short entry", short)
                

if strategy.position_size < 0
    if close < (strategy.position_avg_price * PROFIT_TARGET_SHORT)
        strategy.close_all()
        

if strategy.position_size < 0
    if close > (strategy.position_avg_price * STOP_LOSS_SHORT)
        strategy.close_all()

